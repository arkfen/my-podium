@page "/"

@inject IConfiguration Configuration

<PageTitle>Season 2025</PageTitle>

<div>
    @((MarkupString)dataTotal)
</div>

<div>
    @((MarkupString)dataPerRace)
</div>


@code {

    private static int _year = 2025;
    private static string _raceType = "F1";
    private string? storageUri;
    private string? accountName;
    private string? storageAccountKey;
    private string dreamsTable = "MyPodiumDreams";
    private string usersTable = "MyPodiumUsers";
    private string racesTable = "MyPodiumRaces";

    private string dataTotal = string.Empty;
    private string dataPerRace = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        storageUri = Configuration.GetConnectionString("DefaultStorageUri");
        accountName = Configuration.GetConnectionString("DefaultAccountName");
        storageAccountKey = Configuration.GetConnectionString("DefaultStorageAccountKey");
        await ListData();
    }

    private async Task ListData()
    {
        if (storageUri is null or "" || accountName is null or "" || storageAccountKey is null or "") return;

        Dictionary<string, string> users = [];
        Dictionary<int, string> races = [];
        var credentials = new TableSharedKeyCredential(accountName, storageAccountKey);
        var storage = new Uri(storageUri);

        var tableClient = new TableClient(storage, usersTable, credentials);
        try
        {
            Pageable<TableEntity> queryResultsFilter = tableClient.Query<TableEntity>();

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                users.Add(qEntity.GetString("Id"), qEntity.GetString("Name"));

            }
            //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch
        {
            dataPerRace += "Sorry, we have some DB problems fetching users... <br>";
        }

        tableClient = new TableClient(storage, racesTable, credentials);
        try
        {
            Pageable<TableEntity> queryResultsFilter =
            tableClient.Query<TableEntity>(filter: $"PartitionKey eq '{_raceType}' and Year eq {_year}");

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                var n = qEntity.GetInt32("NumberRace");
                if (n is null) continue;
                races.Add((int)n, qEntity.GetDouble("NumberGP") + " => " + qEntity.GetString("Name"));
            }
            //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch (Exception e)
        {
            dataPerRace += "Sorry, we have some DB problems fetching races... <br>";
        }

        Dictionary<string, int> userTotals = [];
        Dictionary<string, List<int>> userRaceResults = [];
        foreach (string user in users.Keys) 
        {
            userTotals.Add(user, 0);
            userRaceResults.Add(user, new List<int>());
        }

        tableClient = new TableClient(storage, dreamsTable, credentials);

        foreach (int race in races.Keys.OrderByDescending(r => r))
        {
            dataPerRace += $"<br><h2>{races[race]}</h2>";
            try
            {
                Pageable<TableEntity> queryResultsFilter =
                tableClient.Query<TableEntity>(
                filter: $"PartitionKey eq '{_raceType}' and Year eq {_year} and Race eq {race}");

                foreach (TableEntity qEntity in queryResultsFilter)
                {
                    var userId = qEntity.GetString("UserId");
                    var points = qEntity.GetInt32("Points");
                    string userPoints = "?";
                    if (points is not null)
                    {
                        userPoints = ((int)points).ToString();
                        userTotals[userId] += (int)points;
                        userRaceResults[userId].Add((int)points);
                    }
                    dataPerRace += $"<p><i>{users[userId]}</i>: <b>{userPoints}</b>" +
                    $" points <br> 1. {qEntity.GetString("P1")} <br> 2. {qEntity.GetString("P2")} <br> 3. {qEntity.GetString("P3")} <br></p>";
                }
                //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
            }
            catch
            {
                dataPerRace += "Sorry, we have some DB problems fetching results... <br>";
            }
        }

        dataTotal += "<h1>Totals so far...</h1> ";

        foreach (string user in userTotals.Keys)
        {
            if (userTotals[user] == 0) continue;
            dataTotal += $"<p>{users[user]} : <b>{userTotals[user]}</b></p>";
        }

        // Calculate and display best 10 results
        dataTotal += "<br><h1>Best 10 Races Totals...</h1> ";
        dataTotal += "<p><i>(Showing total points from up to 10 best race predictions per user)</i></p>";

        foreach (string user in userRaceResults.Keys)
        {
            var userResults = userRaceResults[user];
            if (userResults.Count == 0) continue;

            // Sort in descending order and take top 10
            var best10Results = userResults.OrderByDescending(points => points).Take(10).ToList();
            var best10Total = best10Results.Sum();

            if (best10Total > 0)
            {
                string raceCountText = best10Results.Count == 1 ? "race" : "races";
                dataTotal += $"<p>{users[user]} : <b>{best10Total}</b> <span style='font-size: 0.8em; color: #666;'>(from {best10Results.Count} {raceCountText})</span></p>";
            }
        }

        await Task.CompletedTask;
    }

}
