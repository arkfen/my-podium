@page "/podium"
@page "/podium/{UserName}/{PinCode:int?}"
@inject IConfiguration Configuration


<PageTitle>Podium</PageTitle>



<h1>You are <li>@UserName</li>
</h1>

<h2>Your pin code is <li>@PinCode</li>
</h2>

<h3>
    @if (userId is not null)
    {
        <p>Access Granted</p>
        <p>USER ID: @userId</p>




        <h1>Predict the Podium</h1>

        <EditForm Model="@prediction" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="P1" class="form-label">First Place</label>
                <select id="P1" class="form-select" @bind="prediction.P1">
                    <option value="">Select a driver...</option>
                    @foreach (var driver in drivers)
                    {
                        <option value="@driver.Name">@driver.Name</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="P2" class="form-label">Second Place</label>
                <select id="P2" class="form-select" @bind="prediction.P2">
                    <option value="">Select a driver...</option>
                    @foreach (var driver in drivers)
                    {
                        <option value="@driver.Name">@driver.Name</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="P3" class="form-label">Third Place</label>
                <select id="P3" class="form-select" @bind="prediction.P3">
                    <option value="">Select a driver...</option>
                    @foreach (var driver in drivers)
                    {
                        <option value="@driver.Name">@driver.Name</option>
                    }
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Save Prediction</button>
        </EditForm>



    }
    else
    {
        <p>Access restricted! Sorry, try again.</p>
    }
</h3>

<h4>@((MarkupString)debugOutput)</h4>

@code {

    [Parameter]
    public string? UserName { get; set; }
    [Parameter]
    public int? PinCode { get; set; }


    private string? storageUri;
    private string? accountName;
    private string? storageAccountKey;
    private string? userId;
    private string userTable = "MyPodiumUsers";
    private string debugOutput = string.Empty;




    private PodiumPrediction prediction = new PodiumPrediction();
    private List<Driver> drivers = new List<Driver>(); // Populate this list with drivers from MyPodiumDrivers table

    protected override async Task OnInitializedAsync()
    {
        storageUri = Configuration.GetConnectionString("DefaultStorageUri");
        accountName = Configuration.GetConnectionString("DefaultAccountName");
        storageAccountKey = Configuration.GetConnectionString("DefaultStorageAccountKey");
        await AuthenticateUser();
        drivers = await GetDriversAsync();
        await base.OnInitializedAsync();
    }

    private async Task<List<Driver>> GetDriversAsync()
    {
        // Retrieve the list of drivers from the MyPodiumDrivers table
        // Implement the logic to fetch drivers here
        // ...
        return new List<Driver>(); // Placeholder for actual driver list
    }

    private async Task HandleValidSubmit()
    {
        if (prediction.P1 == prediction.P2 || prediction.P1 == prediction.P3 || prediction.P2 == prediction.P3)
        {
            // Show error message
            return;
        }

        // Retrieve the current race number from MyPodiumRaces table
        int currentRaceNumber = await GetCurrentRaceNumberAsync();

        // Create the entity to be saved
        var entity = new TableEntity("F1", $"2024-{currentRaceNumber}-{userId}")
            {
                ["UserId"] = userId,
                ["P1"] = prediction.P1,
                ["P2"] = prediction.P2,
                ["P3"] = prediction.P3,
                ["Year"] = 2024,
                ["Race"] = currentRaceNumber
            };

        // Save the entity to the MyPodiumDreams table
        var tableClient = CreateTableClient("MyPodiumDreams");
        if (tableClient is null) return;
        tableClient.AddEntity(entity);
    }

    private async Task<int> GetCurrentRaceNumberAsync()
    {
        // Implement the logic to retrieve the current race number from MyPodiumRaces table
        // ...
        return 0; // Placeholder for actual race number
    }


    private TableClient CreateTableClient(string tableName)
    {
        if (storageUri is null or "" || accountName is null or "" || storageAccountKey is null or "") return null;
        return new TableClient(
        new Uri(storageUri),
        tableName,
        new TableSharedKeyCredential(accountName, storageAccountKey));
    }

    private async Task AuthenticateUser()
    {
        if (storageUri is null or "" || accountName is null or "" || storageAccountKey is null or "") return;
        var authorized = false;
        var tableClient = new TableClient(
        new Uri(storageUri),
        userTable,
        new TableSharedKeyCredential(accountName, storageAccountKey));

        try
        {
            Pageable<TableEntity> queryResultsFilter =
            tableClient.Query<TableEntity>(filter: $"UserName eq '{UserName}'");

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                debugOutput += $"{qEntity.GetString("Name")}: {qEntity.GetString("UserName")} <br>";
                if (PinCode == qEntity.GetInt32("Pin"))
                {
                    authorized = true;
                    userId = qEntity.GetString("Id");
                }
            }
            debugOutput += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch
        {
            debugOutput += "Sorry, we have some DB problems... <br>";
        }
        if (authorized)
        {
            debugOutput += "Welllcome! You are authorized... <br>";
            debugOutput += $"ID: {userId} <br>";
        }
        await Task.CompletedTask;
    }


    public class PodiumPrediction
    {

        public string? P1 { get; set; }


        public string? P2 { get; set; }


        public string? P3 { get; set; }
    }

    public class Driver
    {
        public string? Name { get; set; }
    }

}