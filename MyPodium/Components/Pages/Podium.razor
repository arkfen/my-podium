@page "/podium"
@page "/podium/{UserName}/{PinCode:int?}"
@inject IConfiguration Configuration


<PageTitle>Podium</PageTitle>



<h1>You are <li>@UserName</li>
</h1>

<h2>Your pin code is <li>@PinCode</li>
</h2>

<h3>
    @if (userId is not null)
    {
        <p>Access Granted</p>
        <p>USER ID: @userId</p>
    }
    else
    {
        <p>Access restricted! Sorry, try again.</p>
    }
</h3>

<h4>@((MarkupString)debugOutput)</h4>

@code {

    [Parameter]
    public string? UserName { get; set; }
    [Parameter]
    public int? PinCode { get; set; }


    private string? storageUri;
    private string? accountName;
    private string? storageAccountKey;
    private string? userId;
    private string userTable = "MyPodiumUsers";
    private string debugOutput = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        storageUri = Configuration.GetConnectionString("DefaultStorageUri");
        accountName = Configuration.GetConnectionString("DefaultAccountName");
        storageAccountKey = Configuration.GetConnectionString("DefaultStorageAccountKey");
        await AuthenticateUser();
    }


    private async Task AuthenticateUser()
    {
        if (storageUri is null or "" || accountName is null or "" || storageAccountKey is null or "") return;
        var authorized = false;
        var tableClient = new TableClient(
        new Uri(storageUri),
        userTable,
        new TableSharedKeyCredential(accountName, storageAccountKey));

        try
        {
            Pageable<TableEntity> queryResultsFilter =
            tableClient.Query<TableEntity>(filter: $"UserName eq '{UserName}'");

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                debugOutput += $"{qEntity.GetString("Name")}: {qEntity.GetString("UserName")} <br>";
                if (PinCode == qEntity.GetInt32("Pin"))
                {
                    authorized = true;
                    userId = qEntity.GetString("Id");
                }
            }
            debugOutput += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch
        {
            debugOutput += "Sorry, we have some DB problems... <br>";
        }
        if (authorized)
        {
            debugOutput += "Welllcome! You are authorized... <br>";
            debugOutput += $"ID: {userId} <br>";
        }
        await Task.CompletedTask;
    }




}