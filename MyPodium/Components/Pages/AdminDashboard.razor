@page "/admin"
@inject AdminAuthService AdminAuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Admin Dashboard - Podium Dream</PageTitle>

@if (_isAuthenticated)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h2">
                        <i class="bi bi-speedometer2 me-2"></i>
                        Admin Dashboard
                    </h1>
                    <div class="d-flex align-items-center">
                        <span class="text-muted me-3">
                            Welcome, <strong>@_adminUsername</strong>
                        </span>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="SignOut">
                            <i class="bi bi-box-arrow-right me-1"></i>
                            Sign Out
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Change Password Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-key me-2"></i>
                            Change Password
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Update your admin account password for enhanced security.</p>
                        <button class="btn btn-warning" @onclick="ShowChangePasswordModal">
                            <i class="bi bi-key me-1"></i>
                            Change Password
                        </button>
                    </div>
                </div>
            </div>

            <!-- Create New Admin Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-person-plus me-2"></i>
                            Create New Admin
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Add a new administrator account to the system.</p>
                        <button class="btn btn-success" @onclick="ShowCreateAdminModal">
                            <i class="bi bi-person-plus me-1"></i>
                            Create Admin
                        </button>
                    </div>
                </div>
            </div>

            <!-- Manage Admins Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-person-x me-2"></i>
                            Manage Admins
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">View and delete administrator accounts that you created.</p>
                        <button class="btn btn-danger" @onclick="NavigateToManageAdmins">
                            <i class="bi bi-people me-1"></i>
                            Manage Admins
                        </button>
                    </div>
                </div>
            </div>

            <!-- User Management Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-people me-2"></i>
                            User Management
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Manage user accounts, view user statistics, and handle user-related operations.</p>
                        <button class="btn btn-primary" disabled>
                            <i class="bi bi-gear me-1"></i>
                            Manage Users
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>

            <!-- Season Management Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-calendar-event me-2"></i>
                            Season Management
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Configure seasons, manage race schedules, and update season-specific settings.</p>
                        <button class="btn btn-success" disabled>
                            <i class="bi bi-calendar-plus me-1"></i>
                            Manage Seasons
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>

            <!-- Podium Management Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-trophy me-2"></i>
                            Podium Management
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Update race results, manage podium positions, and handle scoring systems.</p>
                        <button class="btn btn-warning" disabled>
                            <i class="bi bi-trophy me-1"></i>
                            Manage Podiums
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>

            <!-- Reports & Analytics Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-info">
                    <div class="card-header bg-info text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-graph-up me-2"></i>
                            Reports & Analytics
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">View detailed reports, analytics, and insights about user engagement and predictions.</p>
                        <button class="btn btn-info" disabled>
                            <i class="bi bi-bar-chart me-1"></i>
                            View Reports
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>

            <!-- System Settings Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-secondary">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-gear me-2"></i>
                            System Settings
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Configure application settings, manage system parameters, and update configurations.</p>
                        <button class="btn btn-secondary" disabled>
                            <i class="bi bi-sliders me-1"></i>
                            System Config
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>

            <!-- Email Management Card -->
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 border-dark">
                    <div class="card-header bg-dark text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-envelope me-2"></i>
                            Email Management
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Send notifications, manage email templates, and view email logs.</p>
                        <button class="btn btn-dark" disabled>
                            <i class="bi bi-envelope-plus me-1"></i>
                            Manage Emails
                        </button>
                    </div>
                    <div class="card-footer text-muted small">
                        <i class="bi bi-clock me-1"></i>
                        Coming soon
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Stats Row -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Quick Statistics
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3 text-center">
                                <div class="border rounded p-3">
                                    <h4 class="text-primary mb-1">--</h4>
                                    <small class="text-muted">Total Users</small>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="border rounded p-3">
                                    <h4 class="text-success mb-1">--</h4>
                                    <small class="text-muted">Active Sessions</small>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="border rounded p-3">
                                    <h4 class="text-warning mb-1">--</h4>
                                    <small class="text-muted">Total Predictions</small>
                                </div>
                            </div>
                            <div class="col-md-3 text-center">
                                <div class="border rounded p-3">
                                    <h4 class="text-info mb-1">--</h4>
                                    <small class="text-muted">System Health</small>
                                </div>
                            </div>
                        </div>
                        <div class="text-center mt-3">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Statistics will be populated with future admin features
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center mt-5">
            <div class="col-md-6 text-center">
                <div class="card">
                    <div class="card-body">
                        <i class="bi bi-shield-exclamation display-4 text-warning mb-3"></i>
                        <h3>Access Denied</h3>
                        <p class="text-muted mb-4">You need to sign in with admin credentials to access this area.</p>
                        <button class="btn btn-primary" @onclick="RedirectToSignIn">
                            <i class="bi bi-box-arrow-in-right me-2"></i>
                            Admin Sign In
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Change Password Modal -->
<div class="modal fade @(_showChangePasswordModal ? "show d-block" : "")" tabindex="-1" style="@(_showChangePasswordModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-key me-2"></i>
                    Change Admin Password
                </h5>
                <button type="button" class="btn-close" @onclick="CloseChangePasswordModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="ChangePassword" @onsubmit:preventDefault="true">
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="currentPassword" 
                               @bind="_currentPassword" disabled="@_isProcessing" />
                    </div>
                    <div class="mb-3">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" 
                               @bind="_newPassword" disabled="@_isProcessing" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="confirmPassword" 
                               @bind="_confirmPassword" disabled="@_isProcessing" />
                    </div>
                    
                    @if (!string.IsNullOrEmpty(_passwordChangeError))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @_passwordChangeError
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(_passwordChangeSuccess))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            @_passwordChangeSuccess
                        </div>
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseChangePasswordModal" disabled="@_isProcessing">
                    Cancel
                </button>
                <button type="button" class="btn btn-warning" @onclick="ChangePassword" disabled="@_isProcessing">
                    @if (_isProcessing && _currentOperation == "changePassword")
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-key me-1"></i>
                    Change Password
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create New Admin Modal -->
<div class="modal fade @(_showCreateAdminModal ? "show d-block" : "")" tabindex="-1" style="@(_showCreateAdminModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-plus me-2"></i>
                    Create New Admin
                </h5>
                <button type="button" class="btn-close" @onclick="CloseCreateAdminModal"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="CreateNewAdmin" @onsubmit:preventDefault="true">
                    <div class="mb-3">
                        <label for="newAdminUsername" class="form-label">Username</label>
                        <input type="text" class="form-control" id="newAdminUsername" 
                               @bind="_newAdminUsername" disabled="@_isProcessing" 
                               placeholder="Enter username for new admin" />
                    </div>
                    <div class="mb-3">
                        <label for="newAdminPassword" class="form-label">Password</label>
                        <input type="password" class="form-control" id="newAdminPassword" 
                               @bind="_newAdminPassword" disabled="@_isProcessing" 
                               placeholder="Enter password for new admin" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmAdminPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmAdminPassword" 
                               @bind="_confirmAdminPassword" disabled="@_isProcessing" 
                               placeholder="Confirm password" />
                    </div>
                    
                    @if (!string.IsNullOrEmpty(_createAdminError))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @_createAdminError
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(_createAdminSuccess))
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            @_createAdminSuccess
                        </div>
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseCreateAdminModal" disabled="@_isProcessing">
                    Cancel
                </button>
                <button type="button" class="btn btn-success" @onclick="CreateNewAdmin" disabled="@_isProcessing">
                    @if (_isProcessing && _currentOperation == "createAdmin")
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="bi bi-person-plus me-1"></i>
                    Create Admin
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isAuthenticated = false;
    private string _adminUsername = string.Empty;
    private string? _currentAdminId = null;
    
    // Change Password Modal
    private bool _showChangePasswordModal = false;
    private string _currentPassword = string.Empty;
    private string _newPassword = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _passwordChangeError = string.Empty;
    private string _passwordChangeSuccess = string.Empty;
    
    // Create Admin Modal
    private bool _showCreateAdminModal = false;
    private string _newAdminUsername = string.Empty;
    private string _newAdminPassword = string.Empty;
    private string _confirmAdminPassword = string.Empty;
    private string _createAdminError = string.Empty;
    private string _createAdminSuccess = string.Empty;
    
    // General state
    private bool _isProcessing = false;
    private string _currentOperation = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _isAuthenticated = await AdminAuthService.CheckAdminAuthenticationAsync();
        
        if (_isAuthenticated)
        {
            _adminUsername = await AdminAuthService.GetAdminUsernameAsync();
            _currentAdminId = await AdminAuthService.GetCurrentAdminIdAsync();
        }
    }

    private void RedirectToSignIn()
    {
        var returnUrl = Uri.EscapeDataString("/admin");
        NavigationManager.NavigateTo($"/admin/signin?returnUrl={returnUrl}");
    }

    private async Task SignOut()
    {
        await AdminAuthService.SignOutAsync();
        NavigationManager.NavigateTo("/admin/signin");
    }

    private void NavigateToManageAdmins()
    {
        NavigationManager.NavigateTo("/admin/manage-admins");
    }

    // Change Password Modal Methods
    private void ShowChangePasswordModal()
    {
        _showChangePasswordModal = true;
        _currentPassword = string.Empty;
        _newPassword = string.Empty;
        _confirmPassword = string.Empty;
        _passwordChangeError = string.Empty;
        _passwordChangeSuccess = string.Empty;
    }

    private void CloseChangePasswordModal()
    {
        _showChangePasswordModal = false;
        _currentPassword = string.Empty;
        _newPassword = string.Empty;
        _confirmPassword = string.Empty;
        _passwordChangeError = string.Empty;
        _passwordChangeSuccess = string.Empty;
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrWhiteSpace(_currentPassword) || 
            string.IsNullOrWhiteSpace(_newPassword) || 
            string.IsNullOrWhiteSpace(_confirmPassword))
        {
            _passwordChangeError = "All fields are required.";
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            _passwordChangeError = "New passwords do not match.";
            return;
        }

        if (_newPassword.Length < 6)
        {
            _passwordChangeError = "New password must be at least 6 characters long.";
            return;
        }

        _isProcessing = true;
        _currentOperation = "changePassword";
        _passwordChangeError = string.Empty;
        _passwordChangeSuccess = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AdminAuthService.ChangePasswordAsync(_adminUsername, _currentPassword, _newPassword);
            
            if (result.Success)
            {
                _passwordChangeSuccess = "Password changed successfully!";
                _currentPassword = string.Empty;
                _newPassword = string.Empty;
                _confirmPassword = string.Empty;
                
                // Auto-close modal after 2 seconds
                await Task.Delay(2000);
                CloseChangePasswordModal();
            }
            else
            {
                _passwordChangeError = result.ErrorMessage;
            }
        }
        catch
        {
            _passwordChangeError = "An error occurred while changing the password. Please try again.";
        }
        finally
        {
            _isProcessing = false;
            _currentOperation = string.Empty;
            StateHasChanged();
        }
    }

    // Create Admin Modal Methods
    private void ShowCreateAdminModal()
    {
        _showCreateAdminModal = true;
        _newAdminUsername = string.Empty;
        _newAdminPassword = string.Empty;
        _confirmAdminPassword = string.Empty;
        _createAdminError = string.Empty;
        _createAdminSuccess = string.Empty;
    }

    private void CloseCreateAdminModal()
    {
        _showCreateAdminModal = false;
        _newAdminUsername = string.Empty;
        _newAdminPassword = string.Empty;
        _confirmAdminPassword = string.Empty;
        _createAdminError = string.Empty;
        _createAdminSuccess = string.Empty;
    }

    private async Task CreateNewAdmin()
    {
        if (string.IsNullOrWhiteSpace(_newAdminUsername) || 
            string.IsNullOrWhiteSpace(_newAdminPassword) || 
            string.IsNullOrWhiteSpace(_confirmAdminPassword))
        {
            _createAdminError = "All fields are required.";
            return;
        }

        if (_newAdminPassword != _confirmAdminPassword)
        {
            _createAdminError = "Passwords do not match.";
            return;
        }

        if (_newAdminPassword.Length < 6)
        {
            _createAdminError = "Password must be at least 6 characters long.";
            return;
        }

        if (_newAdminUsername.Length < 3)
        {
            _createAdminError = "Username must be at least 3 characters long.";
            return;
        }

        _isProcessing = true;
        _currentOperation = "createAdmin";
        _createAdminError = string.Empty;
        _createAdminSuccess = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AdminAuthService.CreateAdminAsync(_newAdminUsername, _newAdminPassword, _currentAdminId);
            
            if (result.Success)
            {
                _createAdminSuccess = $"Admin '{_newAdminUsername}' created successfully!";
                _newAdminUsername = string.Empty;
                _newAdminPassword = string.Empty;
                _confirmAdminPassword = string.Empty;
                
                // Auto-close modal after 2 seconds
                await Task.Delay(2000);
                CloseCreateAdminModal();
            }
            else
            {
                _createAdminError = result.ErrorMessage;
            }
        }
        catch
        {
            _createAdminError = "An error occurred while creating the admin. Please try again.";
        }
        finally
        {
            _isProcessing = false;
            _currentOperation = string.Empty;
            StateHasChanged();
        }
    }
}

<style>
    .card {
        transition: transform 0.2s ease-in-out;
    }
    
    .card:hover {
        transform: translateY(-2px);
    }
    
    .card-header h5 {
        font-weight: 600;
    }
    
    .border-rounded {
        border: 1px solid #dee2e6 !important;
    }
    
    .display-4 {
        font-size: 3.5rem;
    }
    
    .modal.show {
        display: block !important;
    }
    
    .modal-backdrop {
        background-color: rgba(0,0,0,0.5);
    }
    
    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
</style>