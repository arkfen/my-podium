@page "/season2024"

@inject IConfiguration Configuration


<PageTitle>Season 2024</PageTitle>


<div>
    @((MarkupString)data)
</div>


@code {

    private static int _year = 2024;
    private static string _raceType = "F1";
    private string? storageUri;
    private string? accountName;
    private string? storageAccountKey;
    private string dreamsTable = "MyPodiumDreams";
    private string usersTable = "MyPodiumUsers";
    private string racesTable = "MyPodiumRaces";

    private string data = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        storageUri = Configuration.GetConnectionString("DefaultStorageUri");
        accountName = Configuration.GetConnectionString("DefaultAccountName");
        storageAccountKey = Configuration.GetConnectionString("DefaultStorageAccountKey");
        await ListData();
    }

    private async Task ListData()
    {
        if (storageUri is null or "" || accountName is null or "" || storageAccountKey is null or "") return;

        Dictionary<string, string> users = [];
        Dictionary<int, string> races = [];
        var credentials = new TableSharedKeyCredential(accountName, storageAccountKey);
        var storage = new Uri(storageUri);

        var tableClient = new TableClient(storage, usersTable, credentials);
        try
        {
            Pageable<TableEntity> queryResultsFilter = tableClient.Query<TableEntity>();

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                users.Add(qEntity.GetString("Id"), qEntity.GetString("Name"));

            }
            //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch
        {
            data += "Sorry, we have some DB problems fetching users... <br>";
        }



        tableClient = new TableClient(storage, racesTable, credentials);
        try
        {
            Pageable<TableEntity> queryResultsFilter =
            tableClient.Query<TableEntity>(filter: $"PartitionKey eq '{_raceType}' and Year eq {_year}");

            foreach (TableEntity qEntity in queryResultsFilter)
            {
                var n = qEntity.GetInt32("Number");
                if (n is null) continue;
                races.Add((int)n, qEntity.GetString("Name"));
            }
            //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
        }
        catch
        {
            data += "Sorry, we have some DB problems fetching races... <br>";
        }


        Dictionary<string, int> userTotals = [];
        foreach (string user in users.Keys) userTotals.Add(user, 0);

        tableClient = new TableClient(storage, dreamsTable, credentials);

        foreach (int race in races.Keys)
        {
            data += $"<h1>{race}. {races[race]}</h1>";
            try
            {
                Pageable<TableEntity> queryResultsFilter =
                tableClient.Query<TableEntity>(
                filter: $"PartitionKey eq '{_raceType}' and Year eq {_year} and Race eq {race}");

                foreach (TableEntity qEntity in queryResultsFilter)
                {
                    var userId = qEntity.GetString("UserId");
                    var points = qEntity.GetInt32("Points");
                    string userPoints = "?";
                    if (points is not null)
                    {
                        userPoints = ((int)points).ToString();
                        userTotals[userId] += (int)points;
                    }
                    data += $"<p><i>{users[userId]}</i>: <b>{userPoints}</b>" +
                    $" points <br> 1. {qEntity.GetString("P1")} <br> 2. {qEntity.GetString("P2")} <br> 3. {qEntity.GetString("P3")} <br></p>";
                }
                //data += $"The query returned {queryResultsFilter.Count()} entities. <br>";
            }
            catch
            {
                data += "Sorry, we have some DB problems fetching results... <br>";
            }
        }

        data += "<br><br><br><br><h2>Totals so far...</h2>";

        foreach (string user in userTotals.Keys)
        {
            data += $"<p>{users[user]} : <b>{userTotals[user]}</b></p>";
        }

        await Task.CompletedTask;

    }

}
